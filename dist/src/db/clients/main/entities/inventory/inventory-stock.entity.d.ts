import { MyBaseEntity } from "../base/my-base.entity";
export declare abstract class InventoryStock extends MyBaseEntity {
    companyId: number;
    distributorId: number;
    productId: number;
    productErpId: string;
    productName: string | null;
    variantName: string | null;
    batchNo?: string | null | undefined;
    mrpBatch: string;
    mfgDate: Date | null;
    expiryDate: Date | null;
    currentStock: number;
    damagedStock: number;
    expiryStock: number;
    inTransitOutBound: number;
    inTransitInBound: number;
    orderQuantity: number;
    receivedQuantity: number;
    salesUnit: string | null;
    netValue: number;
    stockInOut: number;
    standardUnitConversionFactor: number;
    isDeleted: boolean;
    mrp: number;
    purchasePrice: number;
    superUnitConversionFactor: number;
    warehouseErpId: string;
    uid: string;
    pid: string;
    promotionalStock: number;
    masterBatchId?: string;
    goodsInTransit?: number;
    transactionUserId: number;
    transactionUserErpId: string | null;
    transactionUserName: string | null;
    stockCover?: number;
    blockedStock?: number;
    returnableStock?: number;
    isShellProduct?: boolean;
    constructor(companyId: number, distributorId: number, productId: number, productErpId: string, productName: string | null, variantName: string | null, batchNo: string | null | undefined, mrpBatch: string, mfgDate: Date | null, expiryDate: Date | null, currentStock: number, damagedStock: number, expiryStock: number, inTransitOutBound: number, inTransitInBound: number, orderQuantity: number, receivedQuantity: number, salesUnit: string | null, netValue: number, stockInOut: number, standardUnitConversionFactor: number, isDeleted: boolean, mrp: number, purchasePrice: number, superUnitConversionFactor: number, warehouseErpId: string, uid: string, pid: string, promotionalStock: number, transactionUserId: number, transactionUserErpId: string | null, transactionUserName: string | null, masterBatchId?: string, goodsInTransit?: number, stockCover?: number, blockedStock?: number, returnableStock?: number, isShellProduct?: boolean);
}
export declare class InventoryStockDto extends InventoryStock {
    constructor({ companyId, distributorId, productId, productErpId, productName, variantName, batchNo, mrpBatch, mfgDate, expiryDate, currentStock, damagedStock, expiryStock, inTransitOutBound, inTransitInBound, orderQuantity, receivedQuantity: receivedQuantity, salesUnit, netValue, stockInOut, standardUnitConversionFactor, isDeleted, mrp, purchasePrice, superUnitConversionFactor, warehouseErpId, uid, pid, promotionalStock, transactionUserId, transactionUserErpId, transactionUserName, masterBatchId, goodsInTransit, stockCover, blockedStock, returnableStock, isShellProduct, }: {
        companyId: number;
        distributorId: number;
        productId: number;
        productErpId: string;
        productName: string | null;
        variantName: string | null;
        batchNo: string | null | undefined;
        mrpBatch: string;
        mfgDate: Date | null;
        expiryDate: Date | null;
        currentStock: number;
        damagedStock: number;
        expiryStock: number;
        inTransitOutBound: number;
        inTransitInBound: number;
        orderQuantity: number;
        receivedQuantity: number;
        salesUnit: string | null;
        netValue: number;
        stockInOut: number;
        standardUnitConversionFactor: number;
        isDeleted: boolean;
        mrp: number;
        purchasePrice: number;
        superUnitConversionFactor: number;
        warehouseErpId: string;
        uid: string;
        pid: string;
        promotionalStock: number;
        transactionUserId: number;
        transactionUserErpId: string | null;
        transactionUserName: string | null;
        masterBatchId?: string;
        goodsInTransit?: number;
        stockCover?: number;
        blockedStock?: number;
        returnableStock?: number;
        isShellProduct?: boolean;
    });
}
//# sourceMappingURL=inventory-stock.entity.d.ts.map