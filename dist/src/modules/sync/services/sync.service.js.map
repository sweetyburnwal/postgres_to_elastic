{"version":3,"file":"sync.service.js","sourceRoot":"","sources":["../../../../../src/modules/sync/services/sync.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,2CAAoD;AACpD,+CAAwD;AACxD,0DAAgD;AAChD,6CAAmD;AACnD,qCAAqC;AACrC,2CAA+C;AAGxC,IAAM,WAAW,mBAAjB,MAAM,WAAW;IAItB,YAEE,kBAAgD,EACxC,aAA4B;QAD5B,uBAAkB,GAAlB,kBAAkB,CAAsB;QACxC,kBAAa,GAAb,aAAa,CAAe;QANrB,WAAM,GAAG,IAAI,eAAM,CAAC,aAAW,CAAC,IAAI,CAAC,CAAC;QAQrD,IAAI,CAAC,QAAQ,GAAG,IAAI,sBAAM,CAAC;YACzB,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC,GAAG,CAAS,oBAAoB,CAAC;SAC3D,CAAC,CAAC;IACL,CAAC;IAGK,AAAN,KAAK,CAAC,QAAQ;QACZ,IAAI,CAAC;YAEH,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC;YAGvD,MAAM,UAAU,GAAG,SAAS,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC;gBAC5C;oBACE,KAAK,EAAE;wBACL,MAAM,EAAE,IAAI,CAAC,aAAa,CAAC,GAAG,CAAS,qBAAqB,CAAC;qBAC9D;iBACF;gBACD;oBACE,EAAE,EAAE,GAAG,CAAC,EAAE;oBACV,KAAK,EAAE,GAAG,CAAC,KAAK;oBAChB,OAAO,EAAE,GAAG,CAAC,OAAO;oBACpB,SAAS,EAAE,GAAG,CAAC,SAAS;iBACzB;aACF,CAAC,CAAC;YAEH,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC1B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC;gBACxD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,WAAW,SAAS,CAAC,MAAM,YAAY,CAAC,CAAC;gBAEzD,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;oBAClB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC;gBACtD,CAAC;YACH,CAAC;YAED,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;QACtD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC;QAClD,CAAC;IACH,CAAC;CACF,CAAA;AAjDY,kCAAW;AAehB;IADL,IAAA,eAAI,EAAC,yBAAc,CAAC,eAAe,CAAC;;;;2CAkCpC;sBAhDU,WAAW;IADvB,IAAA,mBAAU,GAAE;IAMR,WAAA,IAAA,0BAAgB,EAAC,QAAQ,CAAC,CAAA;qCACC,oBAAU;QACf,sBAAa;GAP3B,WAAW,CAiDvB","sourcesContent":["import { Injectable, Logger } from \"@nestjs/common\";\nimport { Cron, CronExpression } from \"@nestjs/schedule\";\nimport { Client } from \"@elastic/elasticsearch\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { ConfigService } from \"@nestjs/config\";\n\n@Injectable()\nexport class SyncService {\n  private readonly logger = new Logger(SyncService.name);\n  private readonly esClient: Client;\n\n  constructor(\n    @InjectRepository(Document)\n    private documentRepository: Repository<Document>,\n    private configService: ConfigService\n  ) {\n    this.esClient = new Client({\n      node: this.configService.get<string>(\"ELASTICSEARCH_NODE\"),\n    });\n  }\n\n  @Cron(CronExpression.EVERY_5_MINUTES)\n  async syncData(): Promise<void> {\n    try {\n      // Fetch latest documents from PostgreSQL\n      const documents = await this.documentRepository.find();\n\n      // Bulk index documents to Elasticsearch\n      const operations = documents.flatMap((doc) => [\n        {\n          index: {\n            _index: this.configService.get<string>(\"ELASTICSEARCH_INDEX\"),\n          },\n        },\n        {\n          id: doc.id,\n          title: doc.title,\n          content: doc.content,\n          createdAt: doc.createdAt,\n        },\n      ]);\n\n      if (operations.length > 0) {\n        const result = await this.esClient.bulk({ operations });\n        this.logger.log(`Indexed ${documents.length} documents`);\n\n        if (result.errors) {\n          this.logger.error(\"Some documents failed to index\");\n        }\n      }\n\n      this.logger.log(\"Data sync completed successfully\");\n    } catch (error) {\n      this.logger.error(\"Error syncing data:\", error);\n    }\n  }\n}\n"]}